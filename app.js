const fs = require("node:fs/promises");
const express = require("express");

require("dotenv").config();

const app = express();

app.get("/", (req, res) => {
  res.send("Hello debug_Yourself");
});

app.listen(process.env.PORT, () =>
  console.log(`My server is running on port ${process.env.PORT}`)
);

const commands = require("./commands");

const TelegramBot = require("node-telegram-bot-api");
const bot = new TelegramBot(process.env.TOKEN, {
  polling: {
    interval: 300,
    autoStart: true,
  },
});
bot.setMyCommands(commands);

bot.on("polling_error", (err) => console.log(err.data.error.message));

bot.on("text", async (msg) => {
  try {
    if (msg.text.startsWith("/start")) {
      await bot.sendMessage(msg.chat.id, `–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞! üëãüèª`);

      if (msg.text.length > 6) {
        const refID = msg.text.slice(7);

        await bot.sendMessage(
          msg.chat.id,
          `–í—ã –∑–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${refID}`
        );
      }
    } else if (msg.text == "/ref") {
      await bot.sendMessage(
        msg.chat.id,
        `${process.env.URL_TO_BOT}?start=${msg.from.id}`
      );
    } else if (msg.text == "/help") {
      await bot.sendMessage(msg.chat.id, `–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏`);
      await bot.sendMessage(
        msg.chat.id,
        `–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ HTML\n\n<b>–ñ–∏—Ä–Ω—ã–π –¢–µ–∫—Å—Ç</b>\n<i>–¢–µ–∫—Å—Ç –ö—É—Ä—Å–∏–≤–æ–º</i>\n<code>–¢–µ–∫—Å—Ç —Å –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º</code>\n<s>–ü–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s>\n<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u>\n<pre language='c++'>–∫–æ–¥ –Ω–∞ c++</pre>\n<a href='t.me'>–ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞</a>`,
        {
          parse_mode: "HTML",
        }
      );

      await bot.sendMessage(
        msg.chat.id,
        "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ Markdown\n\n*–ñ–∏—Ä–Ω—ã–π –¢–µ–∫—Å—Ç*\n_–¢–µ–∫—Å—Ç –ö—É—Ä—Å–∏–≤–æ–º_\n`–¢–µ–∫—Å—Ç —Å –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º`\n~–ü–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç~\n``` –∫–æ–¥ ```\n||—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç||\n[–ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞](t.me)",
        {
          parse_mode: "MarkdownV2",
        }
      );
    } else if (msg.text == "/link") {
      await bot.sendMessage(msg.chat.id, `https://habr.com/`, {
        disable_web_page_preview: true,
        //disable_notification: true,
      });
    } else if (msg.text == "/menu") {
      await bot.sendMessage(msg.chat.id, `–ú–µ–Ω—é –±–æ—Ç–∞`, {
        reply_markup: {
          keyboard: [
            ["‚≠êÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞", "‚≠êÔ∏è –í–∏–¥–µ–æ"],
            ["‚≠êÔ∏è –ê—É–¥–∏–æ", "‚≠êÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"],
            ["‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"],
          ],
          resize_keyboard: true,
        },
      });
    } else if (msg.text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é") {
      await bot.sendMessage(msg.chat.id, "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ", {
        reply_markup: {
          remove_keyboard: true,
        },
      });
    } else if (msg.text == "‚≠êÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞") {
      await bot.sendPhoto(msg.chat.id, "./image.jpg", {
        caption: "<b>‚≠êÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞</b>",
        parse_mode: "HTML",
      });
      //–°–∫–∏–¥—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Readable Stream
      //const imageStream = fs.createReadStream("./image.jpg");
      //await bot.sendPhoto(msg.chat.id, imageStream);
      //–°–∫–∏–¥—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –±—É—Ñ–µ—Ä–∞
      //const imageBuffer = fs.readFileSync("./image.jpg");
      //await bot.sendPhoto(msg.chat.id, imageBuffer);
    } else {
      await bot.sendMessage(msg.chat.id, msg.text);
    }
  } catch (error) {
    console.log(error);
  }
});

bot.on("photo", async (img) => {
  //console.log(img);
  const photoGroup = [];

  for (let index = 0; index < img.photo.length; index++) {
    const photoPath = await bot.downloadFile(
      img.photo[index].file_id,
      "./images"
    );

    photoGroup.push({
      type: "photo",
      media: photoPath,
      caption: `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${img.photo[index].file_size} –±–∞–π—Ç\n–®–∏—Ä–∏–Ω–∞: ${img.photo[index].width}\n–í—ã—Å–æ—Ç–∞: ${img.photo[index].height}`,
    });
  }

  await bot.sendMediaGroup(img.chat.id, photoGroup);

  for (let index = 0; index < photoGroup.length; index++) {
    await fs.unlink(photoGroup[index].media, (error) => {
      if (error) {
        console.log(error);
      }
    });
  }
});

bot.on("document", async (msg) => {
  console.log(msg);
});

// bot.on("text", async (msg) => {
//   console.log(msg);
//   bot.sendMessage(msg.chat.id, "–æ—Ç–≤–µ—Ç: " + msg.text);
// });

// bot.on("text", async (msg) => {
//   const msgWait = await bot.sendMessage(msg.chat.id, `–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...`);

//   setTimeout(async () => {
//     await bot.deleteMessage(msgWait.chat.id, msgWait.message_id);
//     await bot.sendMessage(msg.chat.id, msg.text);
//   }, 5000);
// });

// bot.on("text", async (msg) => {
//   const msgWait = await bot.sendMessage(msg.chat.id, `–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...`);

//   setTimeout(async () => {
//     try {
//       await bot.editMessageText(msg.text, {
//         chat_id: msgWait.chat.id,
//         message_id: msgWait.message_id,
//       });
//     } catch (error) {
//       console.log(error);
//     }
//   }, 3000);
// });
